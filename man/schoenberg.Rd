% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schoenberg.R
\name{schoenberg}
\alias{schoenberg}
\title{Generate a 12-tone (dodecaphonic) serialist matrix using Arnold Schoenberg's technique.}
\usage{
schoenberg(prime0 = NULL, lead_tone = NULL, use_sharps = TRUE,
  seed = NULL)
}
\arguments{
\item{prime0}{Optional vector of notes or numeric note indices to use in forming the matrix.
If the vector is numeric, the values must span from 0 - 11 (unless \code{lead_tone} is specified, note 0 will be treated as "C").}

\item{lead_tone}{Name of the note to use as the leading tone of the matrix.}

\item{use_sharps}{Logical scalar that determines whether accidentals should be represented as sharps (\code{TRUE}; default) or flats (\code{FALSE}).}

\item{seed}{Optional seed value to use in generating random matrices. Set this to a numeric value when matrices need to be reproducible.}
}
\value{
A 12-tone matrix of the "schoenberg" class.
}
\description{
Generate a 12-tone (dodecaphonic) serialist matrix using Arnold Schoenberg's technique.
}
\examples{
#### Generating Random 12-Tone Matrices ####
# The schoenberg() function can generate completely random 12-tone matrices:
schoenberg()

# Or you can specify a seed value so that your matrices are reproducible:
schoenberg(seed = 42)


#### Generating 12-Tone Matrices From a Specified Vector of Notes ####
# For illustration, let's create two equivalent vectors of note information...
# one vector with note labels:
prime01 <- c("F#", "F", "D", "E", "D#", "C", "A", "C#", "G#", "B", "A#", "G")
# and another vector with numeric indices of notes:
prime02 <- c(6, 5, 2, 4, 3, 0, 9, 1, 8, 11, 10, 7)


# Now, let's generate a 12-tone matrix from our note-based vector:
schoenberg(prime0 = prime01)

# And let's generate a matrix from our number-based vector:
schoenberg(prime0 = prime02)

# These two approaches produce identical outputs:
all(schoenberg(prime0 = prime01) == schoenberg(prime0 = prime02))


# schoenberg() uses sharp notation by default, but matrices can be generated
# with flat notation by setting use_sharps to FALSE:
schoenberg(prime0 = prime01, use_sharps = FALSE)
schoenberg(prime0 = prime02, use_sharps = FALSE)

# As before, these two approaches produce identical outputs:
all(schoenberg(prime0 = prime01, use_sharps = FALSE) ==
         schoenberg(prime0 = prime02, use_sharps = FALSE))


# We can also manipulate the output of the schoenberg() function
# so that the leading tone of the matrix is a particular note.
# This works with either note-based or number-based input vectors:
schoenberg(prime0 = prime01, lead_tone = "C")
schoenberg(prime0 = prime02, lead_tone = "C")

# And, as before, these two approaches produce identical outputs:
all(schoenberg(prime0 = prime01, lead_tone = "C") ==
         schoenberg(prime0 = prime02, lead_tone = "C"))
}
